import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:share_plus/share_plus.dart';
import '../models/excuse.dart';
import '../services/excuse_service.dart';
import '../services/favorites_service.dart';
import '../widgets/excuse_card.dart';
import '../widgets/category_selector.dart';
import 'favorites_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  Excuse? _currentExcuse;
  String _selectedCategory = 'all';
  bool _isFavorite = false;
  late AnimationController _shakeController;

  @override
  void initState() {
    super.initState();
    _shakeController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    _loadData();
  }

  @override
  void dispose() {
    _shakeController.dispose();
    super.dispose();
  }

  Future<void> _loadData() async {
    await ExcuseService.loadExcuses();
    _generateNewExcuse();
  }

  void _generateNewExcuse() {
    setState(() {
      _currentExcuse = ExcuseService.getRandomExcuse(category: _selectedCategory);
    });
    _checkFavoriteStatus();
    _shakeController.forward().then((_) => _shakeController.reset());
  }

  Future<void> _checkFavoriteStatus() async {
    if (_currentExcuse != null) {
      final isFav = await FavoritesService.isFavorite(_currentExcuse!);
      setState(() {
        _isFavorite = isFav;
      });
    }
  }

  void _onCategoryChanged(String category) {
    setState(() {
      _selectedCategory = category;
    });
    _generateNewExcuse();
  }

  Future<void> _toggleFavorite() async {
    if (_currentExcuse != null) {
      if (_isFavorite) {
        await FavoritesService.removeFavorite(_currentExcuse!);
      } else {
        await FavoritesService.addFavorite(_currentExcuse!);
      }
      setState(() {
        _isFavorite = !_isFavorite;
      });
    }
  }

  void _shareExcuse() {
    if (_currentExcuse != null) {
      Share.share(
        '${_currentExcuse!.text}\n\nGenerated by Nope! - The Excuse Generator ðŸš«',
        subject: 'My excuse for today',
      );
    }
  }

  void _copyToClipboard() {
    if (_currentExcuse != null) {
      Clipboard.setData(ClipboardData(text: _currentExcuse!.text));
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Excuse copied to clipboard! ðŸ“‹'),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      body: SafeArea(
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Nope!',
                        style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: const Color(0xFF1E293B),
                        ),
                      ),
                      Text(
                        'Excuse Generator',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: const Color(0xFF64748B),
                        ),
                      ),
                    ],
                  ),
                  IconButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const FavoritesScreen(),
                        ),
                      );
                    },
                    icon: const Icon(Icons.favorite, color: Color(0xFFEF4444)),
                    style: IconButton.styleFrom(
                      backgroundColor: Colors.white,
                      elevation: 2,
                    ),
                  ),
                ],
              ),
            ).animate().fadeIn(duration: 600.ms).slideY(begin: -0.3),

            // Category Selector
            CategorySelector(
              selectedCategory: _selectedCategory,
              onCategoryChanged: _onCategoryChanged,
            ).animate().fadeIn(delay: 200.ms, duration: 600.ms).slideY(begin: -0.2),

            const SizedBox(height: 20),

            // Main Excuse Card
            Expanded(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: _currentExcuse == null
                    ? const Center(child: CircularProgressIndicator())
                    : ExcuseCard(
                        excuse: _currentExcuse!,
                        isFavorite: _isFavorite,
                        onToggleFavorite: _toggleFavorite,
                        onShare: _shareExcuse,
                        onCopy: _copyToClipboard,
                      ),
              ),
            ),

            // Generate Button
            Padding(
              padding: const EdgeInsets.all(20),
              child: SizedBox(
                width: double.infinity,
                height: 60,
                child: ElevatedButton(
                  onPressed: _generateNewExcuse,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF6366F1),
                    foregroundColor: Colors.white,
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.shuffle, size: 24),
                      const SizedBox(width: 12),
                      Text(
                        'GIVE ME AN EXCUSE',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ).animate().fadeIn(delay: 400.ms, duration: 600.ms).slideY(begin: 0.3),
          ],
        ),
      ),
    );
  }
} 